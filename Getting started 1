import sys
print ('Python:{}'.format(sys.version))
import scipy
print ('Scipy:{}'.format(scipy._version_))
import numpy
print ('Numpy:{}'.format(numpy._version_))
import matplotlib
print ('Matplotlib:{}'.format(matplotlib._version_))
import pandas
print ('Pandas:{}'.format(pandas._version_))
import sklearn
print ('Sklearn:{}'.format(sklearn._version_))

import pandas
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test.split
from sklearn.model_selection import cross_val_score
from sklearn.model_selectiion StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

#loading the data
url="https://raw.githubusercontent.com/jbrownless/Datasets/master/iris.csv"
names=['sepal-length','sepal-width','petal-length','petal-width','class']

#dimensions of the dataset
print(dataset.shape)

#take a peek at the data
print (dataset.head(20))

#statistical summary
print (dataset.grouphy('class').size())

#univariate plots-box and whisker plots
dataset.plot(kind='box',subplots=True,layout=(2,2),sharex=False,sharey=False)

#histogram of the variable
dataset.hist()
pyplot.show()

#multivariate plots
scatter_matrix(dataset)
pyplot.show()

#creating a validation dataset
#splitting dataset
array=dataset.values
x=array[:,0:4]
x_train,x_validation,y_train,y_validation=train_test_split(x,y,test_size=0.2,random_state=1)

#Logistic Regression
#Linear Discriminant Analysis
#K-Nearest neighbors
#Classification and Regression Trees
Gaussian Naive Bayes
#Support Vector Machines

#Building models
model=()
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborClassifier()))
models.append(('NB', Gaussian NB ()))
models.append(('SVN',SVC(gamma='auto')))

#evaluate the created models
results=[]
names=[]
for name,model in models:
    KFold=StratifiedKFold(n_splits=10,random_state=1)
    cv_results=cross_val_score(model,x_train,y_train,cv=KFold,scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s:%f(%f)'%(name,cv_result.mean),
    cv_results.std()))
    
    #compare our models
    pyplot.boxplot(results,labels=names)
    pyplot.title('Algorithm Comparison')
    pyplot.show()
    
    #make predictions on svm
    model=SVC (gamma='auto')
    model.fit(x_train,y_train)
    predictions=model.predict(x_validation)
    
    #evaluate our predictions
    print (accuracy_score(y_validation, predictions))
    print (confusion_matrix(y_validation, predictions))
    print (classification_report(y_validaation, predictions))
